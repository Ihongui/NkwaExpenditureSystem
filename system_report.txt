üìò Nkwa Real Estate Expenditure Management System - Documentation
=================================================================

1Ô∏è‚É£ DATA STRUCTURE JUSTIFICATIONS
--------------------------------
‚Ä¢ HashMap (Expenditures): Used for fast retrieval by code (O(1) average).
‚Ä¢ HashSet (Categories): Ensures uniqueness and supports fast lookups.
‚Ä¢ Map (Accounts): Associates bank account IDs with details and expenditures.
‚Ä¢ Queue (Receipts): FIFO structure for receipt processing in order of submission.
‚Ä¢ Graph (Account Relationships): Models internal transfers as directed edges.
‚Ä¢ List/ArrayList: Used for sorting and intermediate storage.
‚Ä¢ TreeMap: Used to store burn rate with monthly ordering.

2Ô∏è‚É£ SEARCHING TECHNIQUES
-------------------------
‚Ä¢ Linear Search: Used to find expenditures by category, date range, amount, or account.
  - Justified since we're not using external libraries or databases.
  - Time Complexity: O(n)

3Ô∏è‚É£ SORTING TECHNIQUES
------------------------
‚Ä¢ Insertion Sort: Used for sorting expenditures by category or date.
  - Easy to implement manually.
  - Stable and works well for small to moderate datasets.
  - Time Complexity: O(n¬≤) worst, O(n) best (already sorted).

4Ô∏è‚É£ COMPLEXITY ANALYSIS
------------------------
‚Ä¢ HashMap Lookup: O(1) average, O(n) worst
‚Ä¢ HashSet Add/Search: O(1) average, O(n) worst
‚Ä¢ Queue Operations (enqueue/dequeue): O(1)
‚Ä¢ BFS for graph traversal: O(V + E)
‚Ä¢ Insertion Sort: O(n¬≤) worst, Œ©(n) best

‚úÖ REPORT COMPLETED.
Generated by: ReportGenerator.java
