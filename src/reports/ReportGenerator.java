package reports;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class ReportGenerator {

    public void generateReport() {
        String fileName = "system_report.txt";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            writer.write("üìò Nkwa Real Estate Expenditure Management System - Documentation\n");
            writer.write("=================================================================\n\n");

            writer.write("1Ô∏è‚É£ DATA STRUCTURE JUSTIFICATIONS\n");
            writer.write("--------------------------------\n");
            writer.write("‚Ä¢ HashMap (Expenditures): Used for fast retrieval by code (O(1) average).\n");
            writer.write("‚Ä¢ HashSet (Categories): Ensures uniqueness and supports fast lookups.\n");
            writer.write("‚Ä¢ Map (Accounts): Associates bank account IDs with details and expenditures.\n");
            writer.write("‚Ä¢ Queue (Receipts): FIFO structure for receipt processing in order of submission.\n");
            writer.write("‚Ä¢ Graph (Account Relationships): Models internal transfers as directed edges.\n");
            writer.write("‚Ä¢ List/ArrayList: Used for sorting and intermediate storage.\n");
            writer.write("‚Ä¢ TreeMap: Used to store burn rate with monthly ordering.\n\n");

            writer.write("2Ô∏è‚É£ SEARCHING TECHNIQUES\n");
            writer.write("-------------------------\n");
            writer.write("‚Ä¢ Linear Search: Used to find expenditures by category, date range, amount, or account.\n");
            writer.write("  - Justified since we're not using external libraries or databases.\n");
            writer.write("  - Time Complexity: O(n)\n\n");

            writer.write("3Ô∏è‚É£ SORTING TECHNIQUES\n");
            writer.write("------------------------\n");
            writer.write("‚Ä¢ Insertion Sort: Used for sorting expenditures by category or date.\n");
            writer.write("  - Easy to implement manually.\n");
            writer.write("  - Stable and works well for small to moderate datasets.\n");
            writer.write("  - Time Complexity: O(n¬≤) worst, O(n) best (already sorted).\n\n");

            writer.write("4Ô∏è‚É£ COMPLEXITY ANALYSIS\n");
            writer.write("------------------------\n");
            writer.write("‚Ä¢ HashMap Lookup: O(1) average, O(n) worst\n");
            writer.write("‚Ä¢ HashSet Add/Search: O(1) average, O(n) worst\n");
            writer.write("‚Ä¢ Queue Operations (enqueue/dequeue): O(1)\n");
            writer.write("‚Ä¢ BFS for graph traversal: O(V + E)\n");
            writer.write("‚Ä¢ Insertion Sort: O(n¬≤) worst, Œ©(n) best\n\n");

            writer.write("‚úÖ REPORT COMPLETED.\n");
            writer.write("Generated by: ReportGenerator.java\n");

            System.out.println("üìÑ system_report.txt has been generated successfully.");

        } catch (IOException e) {
            System.out.println("‚ùå Error generating report: " + e.getMessage());
        }
    }
}
